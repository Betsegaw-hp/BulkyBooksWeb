@model BulkyBooksWeb.Models.ViewModels.CheckoutViewModel
@{
    ViewData["Title"] = "Checkout";
}

<div class="container py-4">
    <h1 class="display-4 text-center mb-4">Secure Checkout</h1>
    
    <div class="row">
        <div class="col-md-8">
            <div class="card border-dark mb-4">
                <div class="card-body">
                    <form asp-controller="Checkout" asp-action="ProcessCheckout" method="post">
                        @Html.AntiForgeryToken()
                        <div asp-validation-summary="All" class="text-danger mb-3"></div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Email" class="form-label"></label>
                                    <input asp-for="Email" class="form-control" />
                                    <span asp-validation-for="Email" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="PhoneNumber" class="form-label"></label>
                                    <input asp-for="PhoneNumber" class="form-control" />
                                    <span asp-validation-for="PhoneNumber" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="FirstName" class="form-label">FirstName</label>
                                    <input asp-for="FirstName" class="form-control" />
                                    <span asp-validation-for="FirstName" class="text-danger"></span>
                                </div>
                                <div class="mb-3">
                                    <label asp-for="LastName" class="form-label">LastName</label>
                                    <input asp-for="LastName" class="form-control" />
                                    <span asp-validation-for="LastName" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg">
                                Proceed to Payment <i class="fas fa-lock ms-2"></i>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card border-dark">
                <div class="card-header bg-dark text-white">
                    <h5 class="mb-0">Order Summary</h5>
                </div>
                <div class="card-body">
                    <div class="list-group">
                        @foreach (var item in Model.CartItems)
                        {
                            <div class="list-group-item">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h6 class="mb-1">@item.Title</h6>
                                        <small class="text-muted">UnitPrice: @item.Price.ToString("C")</small>
                                    </div>
                                    <div class="text-end">
                                        <span class="text-success fw-bold">@((item.Price * item.Quantity).ToString("C"))</span><br>
                                        <span class="text-muted text-end"> x @item.Quantity</span>
                                    </div>
                                </div>
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <button type="button" class="btn btn-sm btn-outline-secondary cart-decrease" data-book-id="@item.BookId" data-current-quantity="@item.Quantity">-</button>
                                        <span class="quantity-display mx-2">@item.Quantity</span>
                                        <button type="button" class="btn btn-sm btn-outline-secondary cart-increase" data-book-id="@item.BookId" data-current-quantity="@item.Quantity">+</button>
                                    </div>
                                    <div class="text-end">
                                        <button type="button" class="btn btn-sm text-danger cart-remove" data-book-id="@item.BookId">Remove</button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="mt-3">
                        <div class="d-flex justify-content-between">
                            <span>Subtotal:</span>
                            <span>@Model.Subtotal.ToString("C")</span>
                        </div>
                        <div class="d-flex justify-content-between">
                            <span>Tax:</span>
                            <span>@Model.TaxAmount.ToString("C")</span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between fw-bold">
                            <span>Total:</span>
                            <span>@Model.OrderTotal.ToString("C")</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        $(document).ready(function() {
            // Handle decrease quantity button
            $('.cart-decrease').click(function() {
                const bookId = $(this).data('book-id');
                const currentQuantity = parseInt($(this).data('current-quantity'));
                const newQuantity = Math.max(currentQuantity - 1, 0);
                updateCartItem(bookId, newQuantity);
            });

            // Handle increase quantity button
            $('.cart-increase').click(function() {
                const bookId = $(this).data('book-id');
                const currentQuantity = parseInt($(this).data('current-quantity'));
                const newQuantity = currentQuantity + 1;
                updateCartItem(bookId, newQuantity);
            });

            // Handle remove button
            $('.cart-remove').click(function() {
                const bookId = $(this).data('book-id');
                removeCartItem(bookId);
            });

            // Function to update cart item quantity
            function updateCartItem(bookId, quantity) {
                $.ajax({
                    url: '@Url.Action("UpdateCartAjax", "Home")',
                    type: 'POST',
                    data: { id: bookId, quantity: quantity },
                    success: function(response) {
                        if (response.success) {
                            // Update UI
                            if (response.removed) {
                                $(`[data-book-id="${bookId}"]`).closest('.list-group-item').fadeOut(300, function() {
                                    $(this).remove();
                                    
                                    // If no items left, show empty cart message
                                    if ($('.list-group-item').length === 0) {
                                        $('.list-group').html('<div class="text-center p-3">Your cart is empty</div>');
                                    }
                                });
                            } else {
                                // Update quantity display
                                $(`[data-book-id="${bookId}"]`).closest('.list-group-item').find('.quantity-display').text(quantity);
                                
                                // Update buttons data attribute
                                $(`.cart-increase[data-book-id="${bookId}"]`).data('current-quantity', quantity);
                                $(`.cart-decrease[data-book-id="${bookId}"]`).data('current-quantity', quantity);
                                
                                // Update item subtotal
                                const formattedSubtotal = new Intl.NumberFormat('en-US', { 
                                    style: 'currency', 
                                    currency: 'USD' 
                                }).format(response.itemSubtotal);
                                
                                $(`.cart-decrease[data-book-id="${bookId}"]`).closest('.list-group-item')
                                    .find('.text-success')
                                    .text(formattedSubtotal);
                                
                                $(`.cart-decrease[data-book-id="${bookId}"]`).closest('.list-group-item')
                                    .find('.text-muted.text-end')
                                    .text(` x ${quantity}`);
                            }

                            // Update totals
                            updateOrderTotals(response);
                            
                            // Update cart count in navigation
                            if (window.updateCartCount) {
                                window.updateCartCount();
                            }
                            
                            // Show success message
                            Swal.fire({
                                title: 'Success!',
                                text: response.message,
                                icon: 'success',
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        } else {
                            // Show error message
                            Swal.fire({
                                title: 'Error!',
                                text: response.message,
                                icon: 'error',
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        }
                    },
                    error: function() {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to update cart',
                            icon: 'error',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000
                        });
                    }
                });
            }

            // Function to remove cart item
            function removeCartItem(bookId) {
                $.ajax({
                    url: '@Url.Action("RemoveFromCartAjax", "Home")',
                    type: 'POST',
                    data: { id: bookId },
                    success: function(response) {
                        if (response.success) {
                            // Remove the item from UI
                            $(`[data-book-id="${bookId}"]`).closest('.list-group-item').fadeOut(300, function() {
                                $(this).remove();
                                
                                // If no items left, show empty cart message
                                if ($('.list-group-item').length === 0) {
                                    $('.list-group').html('<div class="text-center p-3">Your cart is empty</div>');
                                }
                            });

                            // Update totals
                            updateOrderTotals(response);
                            
                            // Update cart count in navigation
                            if (window.updateCartCount) {
                                window.updateCartCount();
                            }
                            
                            // Show success message
                            Swal.fire({
                                title: 'Success!',
                                text: response.message,
                                icon: 'success',
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        } else {
                            // Show error message
                            Swal.fire({
                                title: 'Error!',
                                text: response.message,
                                icon: 'error',
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        }
                    },
                    error: function() {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to remove item from cart',
                            icon: 'error',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000
                        });
                    }
                });
            }
            
            // Function to update order totals
            function updateOrderTotals(response) {
                // Format currency values
                const formatCurrency = (value) => {
                    return new Intl.NumberFormat('en-US', { 
                        style: 'currency', 
                        currency: 'USD' 
                    }).format(value);
                };
                
                // Update subtotal
                $('.d-flex.justify-content-between').find('span:contains("Subtotal:")').next().text(formatCurrency(response.subtotal));
                
                // Update tax amount
                $('.d-flex.justify-content-between').find('span:contains("Tax:")').next().text(formatCurrency(response.taxAmount));
                
                // Update total
                $('.d-flex.justify-content-between.fw-bold').find('span:contains("Total:")').next().text(formatCurrency(response.orderTotal));
            }
        });
    </script>
}