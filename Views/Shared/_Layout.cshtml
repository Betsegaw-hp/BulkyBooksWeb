@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.IdentityModel.Tokens
@using Microsoft.AspNetCore.Http
@{
    // Helper function to check active route
    string IsActive(string controller, string action = "")
    {
        var currentController = ViewContext.RouteData.Values["controller"]?.ToString();
        var currentAction = ViewContext.RouteData.Values["action"]?.ToString();
        
        bool controllerMatch = string.Equals(currentController, controller, StringComparison.OrdinalIgnoreCase);
        bool actionMatch = action.IsNullOrEmpty() || string.Equals(currentAction, action, StringComparison.OrdinalIgnoreCase);
        return (controllerMatch && actionMatch) ? "active" : "";
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BulkyBooksWeb</title>
    <meta name="description" content="@ViewData["Description"]" />
    <meta name="keywords" content="@ViewData["Keywords"]" />
    <meta name="author" content="@ViewData["Author"]" />
    <meta name="robots" content="@ViewData["Robots"]" />
    @* <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" /> *@
    <link rel="stylesheet" href="~/css/bootswatch/bootstrap.min.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/BulkyBooksWeb.styles.css" asp-append-version="true" />
    
    <!-- Add Font Awesome for icons -->
    <script src="https://kit.fontawesome.com/75c9ecad4c.js"></script>
    
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <!-- SweetAlert2 custom styling to ensure it appears above sticky navigation -->
    <style>
        .swal2-container {
            z-index: 9999 !important;
        }
        
        /* Ensure sticky header has appropriate z-index */
        .sticky-top {
            z-index: 1030;
        }
        
        /* Ensure toast notifications are positioned correctly */
        .swal2-toast-container {
            z-index: 9999 !important;
        }
        
        /* Custom classes for different SweetAlert containers */
        .swal2-top-end-container {
            z-index: 9999 !important;
        }
        
        .swal2-center-container {
            z-index: 9999 !important;
        }
        
        /* Ensure toasts appear below the navbar but above other content */
        .swal2-container.swal2-top-end {
            top: 80px !important; /* Adjust based on your navbar height */
        }
        
        /* Additional styling for better visibility */
        .swal2-toast {
            box-shadow: 0 4px 12px rgba(0,0,0,0.3) !important;
        }
        
        /* Cart badge animation */
        #cart-badge {
            transition: all 0.3s ease;
        }
        
        .cart-bounce {
            animation: cartBounce 0.6s ease;
        }
        
        @@keyframes cartBounce {
            0%, 20%, 50%, 80%, 100% {
                transform: translateY(0) scale(1);
            }
            40% {
                transform: translateY(-10px) scale(1.1);
            }
            60% {
                transform: translateY(-5px) scale(1.05);
            }
        }
    </style>
    
    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
    <header class="sticky-top">
        <nav class="navbar navbar-expand-lg bg-primary" data-bs-theme="dark">
            <div class="container-fluid">
                <a class="navbar-brand d-flex align-items-center" asp-area="" asp-controller="Home" asp-action="Index">
                    <i class="fas fa-book-open me-2"></i>
                    <span class="fw-bold">BulkyBooks</span>
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarColor01" aria-controls="navbarColor01" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarColor01">
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item">
                            <a class="nav-link @IsActive("Home", "Index")" asp-area="" asp-controller="Home" asp-action="Index">
                                <i class="fas fa-home me-1"></i> Home
                            </a>
                        </li>
                        @if(User.IsInRole("Admin") || User.IsInRole("Author"))
                        {
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle @IsActive("Category") @IsActive("Book") " 
                                   data-bs-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">
                                    <i class="fas fa-book me-1"></i> Management
                                </a>
                                <div class="dropdown-menu">
                                    <a class="dropdown-item @IsActive("Book")" asp-area="" asp-controller="Book" asp-action="Index">Manage Books</a>
                                    @if(User.IsInRole("Author"))
                                    {
                                        <a class="dropdown-item @IsActive("Book", "ReviewStatus")" asp-area="" asp-controller="Book" asp-action="ReviewStatus">Review Status</a>
                                    }
                                    <div class="dropdown-divider"></div>
                                    <a class="dropdown-item @IsActive("Category")" asp-area="" asp-controller="Category" asp-action="Index">Manage Categories</a>
                                    @if(User.IsInRole("Author"))
                                    {
                                        <div class="dropdown-divider"></div>
                                        <a class="dropdown-item @IsActive("Kyc")" asp-area="" asp-controller="Kyc" asp-action="Submit">KYC Verification</a>
                                    }
                                    @if(User.IsInRole("Admin"))
                                    {
                                        <div class="dropdown-divider"></div>
                                        <a class="dropdown-item @IsActive("BookReviewAdmin")" asp-area="" asp-controller="BookReviewAdmin" asp-action="Dashboard">Book Reviews</a>
                                        <a class="dropdown-item @IsActive("KycAdmin")" asp-area="" asp-controller="KycAdmin" asp-action="Index">KYC Management</a>
                                    }
                                    
                                </div>
                            </li>
                        }
                        <li class="nav-item">
                            <a class="nav-link @IsActive("Home", "Privacy")" asp-area="" asp-controller="Home" asp-action="Privacy">
                                <i class="fas fa-shield-alt me-1"></i> Privacy
                            </a>
                        </li>
                    </ul>
                    
                    <form class="d-flex me-2 my-2 my-lg-0" id="search-form">
                        <div class="input-group">
                            <input class="form-control" type="search" name="searchQuery" id="search-input" placeholder="Search books..." aria-label="Search">
                            <button class="btn btn-light" type="submit">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </form>
                    
                    <div class="d-flex me-2 gap-2">
                        <a asp-controller="Checkout" asp-action="Index" class="btn btn-light position-relative" id="cart-icon">
                            <i class="fas fa-shopping-cart"></i>
                            <span id="cart-badge" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="display: none;">
                                <span id="cart-count">0</span>
                                <span class="visually-hidden">items in cart</span>
                            </span>
                        </a>
                        @await Component.InvokeAsync("UserNavigation")
                    </div>
                    
                </div>
            </div>
        </nav>
    </header>
    
    @if (ViewContext.RouteData.Values["controller"]?.ToString() != "Home"
         && ViewContext.RouteData.Values["controller"]?.ToString() != "Auth" )
    {
        <div class="container mt-3">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb border-bottom pb-2" style="border-bottom-style: dashed !important;">
                    <li class="breadcrumb-item"><a asp-area="" asp-controller="Home" asp-action="Index">Home</a></li>
                    <li class="breadcrumb-item">
                        <a asp-area="" asp-controller="@ViewContext.RouteData.Values["controller"]" asp-action="Index">
                            @ViewContext.RouteData.Values["controller"]
                        </a>
                    </li>
                    <li class="breadcrumb-item active">
                        @ViewContext.RouteData.Values["action"]
                    </li>
                </ol>
            </nav>
        </div>
    }
    
    @if (TempData["success"] != null || TempData["SuccessMessage"] != null)
    {
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: '@(TempData["success"] ?? TempData["SuccessMessage"])',
                    timer: 3000,
                    showConfirmButton: false,
                    toast: true,
                    position: 'top-end',
                    customClass: {
                        container: 'swal2-top-end-container'
                    },
                    didOpen: (toast) => {
                        toast.style.zIndex = '9999';
                    }
                });
            });
        </script>
    }
    @if (TempData["error"] != null || TempData["ErrorMessage"] != null)
    {
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: '@(TempData["error"] ?? TempData["ErrorMessage"])',
                    timer: 5000,
                    showConfirmButton: false,
                    toast: true,
                    position: 'top-end',
                    customClass: {
                        container: 'swal2-top-end-container'
                    },
                    didOpen: (toast) => {
                        toast.style.zIndex = '9999';
                    }
                });
            });
        </script>
    }
    @if (TempData["WarningMessage"] != null)
    {
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                Swal.fire({
                    icon: 'warning',
                    title: 'Warning!',
                    text: '@TempData["WarningMessage"]',
                    timer: 4000,
                    showConfirmButton: false,
                    toast: true,
                    position: 'top-end',
                    customClass: {
                        container: 'swal2-top-end-container'
                    },
                    didOpen: (toast) => {
                        toast.style.zIndex = '9999';
                    }
                });
            });
        </script>
    }
    @if (TempData["InfoMessage"] != null)
    {
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                Swal.fire({
                    icon: 'info',
                    title: 'Information',
                    text: '@TempData["InfoMessage"]',
                    timer: 4000,
                    showConfirmButton: false,
                    toast: true,
                    position: 'top-end',
                    customClass: {
                        container: 'swal2-top-end-container'
                    },
                    didOpen: (toast) => {
                        toast.style.zIndex = '9999';
                    }
                });
            });
        </script>
    }
    
    <!-- Main Content -->
    <div class="@(ViewContext.RouteData.Values["controller"]?.ToString() == "Home" && ViewContext.RouteData.Values["action"]?.ToString() == "Index" ? "" : "container")">
        <main role="main" class="pb-3" style="min-height: 80dvh;">
            @RenderBody()
        </main>
    </div>

    <!-- Footer -->
    <footer class="border-top text-muted py-4 bg-light mt-4">
        <div class="container">
            <div class="row">
                <div class="col-md-4 mb-3 mb-md-0">
                    <h5 class="mb-3">BulkyBooks</h5>
                    <p class="small">Your one-stop destination for all your reading needs. We offer a wide selection of books across all genres.</p>
                </div>
                <div class="col-md-2 mb-3 mb-md-0">
                    <h5 class="mb-3">Shop</h5>
                    <ul class="list-unstyled small">
                        <li><a href="@Url.Action("Index", "Book")" class="text-decoration-none">All Books</a></li>
                        <li><a href="@Url.Action("Index", "Category")" class="text-decoration-none">Categories</a></li>
                        <li><a href="#" class="text-decoration-none">New Arrivals</a></li>
                        <li><a href="#" class="text-decoration-none">Best Sellers</a></li>
                    </ul>
                </div>
                <div class="col-md-2 mb-3 mb-md-0">
                    <h5 class="mb-3">About</h5>
                    <ul class="list-unstyled small">
                        <li><a href="#" class="text-decoration-none">About Us</a></li>
                        <li><a href="#" class="text-decoration-none">Contact</a></li>
                        <li><a href="@Url.Action("Index", "Privacy")" class="text-decoration-none">Privacy Policy</a></li>
                        <li><a href="#" class="text-decoration-none">Terms of Service</a></li>
                    </ul>
                </div>
                <div class="col-md-4">
                    <h5 class="mb-3">Stay Connected</h5>
                    <div class="d-flex gap-3 mb-3">
                        <a href="#" class="text-decoration-none"><i class="fab fa-facebook-f fa-lg"></i></a>
                        <a href="#" class="text-decoration-none"><i class="fab fa-twitter fa-lg"></i></a>
                        <a href="#" class="text-decoration-none"><i class="fab fa-instagram fa-lg"></i></a>
                        <a href="#" class="text-decoration-none"><i class="fab fa-pinterest fa-lg"></i></a>
                    </div>
                    <p class="small">Subscribe to our newsletter for updates on new releases and promotions.</p>
                    <div class="input-group">
                        <input type="email" class="form-control" placeholder="Your email">
                        <button class="btn btn-primary" type="button">Subscribe</button>
                    </div>
                </div>
            </div>
            <hr class="my-4">
            <div class="d-flex justify-content-between align-items-center">
                <p class="small mb-0">&copy; @DateTime.Now.Year - BulkyBooksWeb</p>
                <p class="small mb-0">Made with <i class="fas fa-heart text-danger"></i> for book lovers</p>
            </div>
        </div>
    </footer>
    
    <!-- Scripts -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    @* <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script> *@
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    
    <!-- Auto-dismiss alerts -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Global SweetAlert2 configuration
            if (typeof Swal !== 'undefined') {
                // Set default configuration for all SweetAlert instances
                const originalFire = Swal.fire;
                Swal.fire = function(options) {
                    // Ensure all SweetAlert instances have proper z-index
                    if (typeof options === 'object') {
                        options.didOpen = options.didOpen || function(element) {
                            element.style.zIndex = '9999';
                            // If it's a toast, position it below the navbar
                            if (options.toast && options.position === 'top-end') {
                                const container = element.closest('.swal2-container');
                                if (container) {
                                    container.style.top = '80px';
                                }
                            }
                        };
                        
                        // Add custom classes for better styling
                        options.customClass = options.customClass || {};
                        if (options.toast) {
                            options.customClass.container = options.customClass.container || 'swal2-toast-container';
                        } else {
                            options.customClass.container = options.customClass.container || 'swal2-center-container';
                        }
                    }
                    return originalFire.call(this, options);
                };
            }

            // Initialize cart count on page load
            updateCartCount();

            // Auto-dismiss alerts after specified time
            const alerts = document.querySelectorAll('[data-auto-dismiss]');
            alerts.forEach(function(alert) {
                const dismissTime = parseInt(alert.dataset.autoDismiss);
                if (dismissTime > 0) {
                    setTimeout(function() {
                        const alertInstance = bootstrap.Alert.getOrCreateInstance(alert);
                        alertInstance.close();
                    }, dismissTime);
                }
            });
            
            // Setup AJAX to include anti-forgery token
            $.ajaxSetup({
                beforeSend: function(xhr, settings) {
                    if (settings.type.toUpperCase() === 'POST') {
                        var token = $('input[name="__RequestVerificationToken"]').val();
                        if (token) {
                            if (settings.data) {
                                settings.data += '&__RequestVerificationToken=' + encodeURIComponent(token);
                            } else {
                                settings.data = '__RequestVerificationToken=' + encodeURIComponent(token);
                            }
                        }
                    }
                }
            });

            // AJAX Search functionality
            const searchForm = document.getElementById('search-form');
            const searchInput = document.getElementById('search-input');
            
            if (searchForm && searchInput) {
                // Handle form submission
                searchForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    performSearch();
                });

                // Handle input changes with debounce
                let searchTimeout;
                searchInput.addEventListener('input', function(e) {
                    clearTimeout(searchTimeout);
                    searchTimeout = setTimeout(() => {
                        if (e.target.value.length >= 3 || e.target.value.length === 0) {
                            performSearch();
                        }
                    }, 500);
                });

                function performSearch() {
                    const searchQuery = searchInput.value;
                    
                    // Only perform search if we're on the home page
                    if (window.location.pathname === '/' || window.location.pathname === '/Home' || window.location.pathname === '/Home/Index') {
                        fetch(`/Home/SearchBooks?searchQuery=${encodeURIComponent(searchQuery)}`)
                            .then(response => response.json())
                            .then(data => {
                                updateSearchResults(data);
                            })
                            .catch(error => {
                                console.error('Search error:', error);
                            });
                    } else {
                        // If not on home page, redirect to home with search
                        window.location.href = `/?searchQuery=${encodeURIComponent(searchQuery)}`;
                    }
                }

                function updateSearchResults(data) {
                    // This function would update the home page results
                    // For now, we'll just trigger a custom event
                    const event = new CustomEvent('searchResults', { detail: data });
                    document.dispatchEvent(event);
                }
            }
        });

        // Cart management functions
        function updateCartCount() {
            fetch('/Home/GetCartCount')
                .then(response => response.json())
                .then(data => {
                    const cartBadge = document.getElementById('cart-badge');
                    const cartCount = document.getElementById('cart-count');
                    const previousCount = parseInt(cartCount.textContent) || 0;
                    
                    if (data.count > 0) {
                        cartCount.textContent = data.count;
                        cartBadge.style.display = 'inline';
                        
                        // Add bounce animation if count increased
                        if (data.count > previousCount) {
                            cartBadge.classList.add('cart-bounce');
                            setTimeout(() => {
                                cartBadge.classList.remove('cart-bounce');
                            }, 600);
                        }
                    } else {
                        cartBadge.style.display = 'none';
                    }
                })
                .catch(error => {
                    console.error('Error fetching cart count:', error);
                });
        }

        // Make updateCartCount globally available
        window.updateCartCount = updateCartCount;
    </script>
    
    <!-- Anti-forgery token for AJAX requests -->
    @Html.AntiForgeryToken()
    
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>